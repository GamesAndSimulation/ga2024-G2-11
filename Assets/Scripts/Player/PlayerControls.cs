//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerWalk"",
            ""id"": ""b42e0bb0-5699-4f37-ae89-8706497cae73"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8a226476-cc72-41f0-a097-d33c0dd7ee33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2ea0af8a-5196-4d42-a4b7-cd31c74bec81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""a0247658-7ad2-41f0-b463-a3254e72593c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7e49ee8-4477-482e-b6e5-fe2441386d0a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponWheel"",
                    ""type"": ""Button"",
                    ""id"": ""90ec8a5b-55ff-40f1-90c5-caefc0f9ac2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5fdf2ce0-c48b-4ea3-992b-911fcb848ad6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4072e106-f00f-4b3c-9f79-006ffe781029"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b7c09235-0a71-45b4-90f7-faaaf3ae6f04"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b0fb77e5-792d-4f54-a04d-6dd26c3fb292"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cf9801cd-bd22-4292-a6b2-289d8719b3fe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Xbox Controller"",
                    ""id"": ""45071d31-c161-44e4-85e3-f386f69f8c53"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d0584cf-8c7d-4a9f-95da-95f3401268c8"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c0aa310-6523-4642-b609-525cb4b2441c"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""72e2f2b2-11b2-4bed-86f5-6182dedda413"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a7b5a5d6-7584-46df-951c-b7d3b87ba0c8"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""39944429-8560-4813-bf26-8bd11be8c6a3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4051a3ac-b388-4c73-b914-6a979fee68eb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8a44796-4764-4bd2-a301-d7786957d103"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d27cb91-c2e6-4ce4-a69b-2e5a7fc5ec52"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd79766a-3770-493c-9d49-6b597bf52347"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d76375e-b8d1-4d91-a8c8-18e89efb57b3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Revolver"",
            ""id"": ""be5ac809-284b-4f55-a35d-b5b7b37b7ba2"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f9d4b969-89ed-405b-830e-8ae30444a087"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b39cbde8-2bd2-44b4-b82d-f2a5aeb78ac2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79a98c47-8df9-4a86-8a90-c1e2a266022d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e999ff7c-e83d-4a3c-91f0-d2c132c935de"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BoardDriving"",
            ""id"": ""7072c165-f720-4b2e-8bc5-0f9e0fad3e94"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""2709bfe0-6329-4eb0-839c-0478d61361e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""4609fe2b-7a3e-486b-85f8-15a5d9259ffe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""424e695d-b506-4501-af1b-a18be83987d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""8c9d84fe-496c-429c-bedd-f7fef1573c30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8f8f578-a6af-4bef-8729-7218e13be9ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a2ecfe1-85ce-4ee6-a1f7-8e8ce382636b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d7fe13b-7e73-4f19-99fc-da170716ac3e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffef3823-a97f-49ad-9d73-03a77ba98238"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sword"",
            ""id"": ""efa61d9a-8595-46cd-ba1e-ccf5c7ce8291"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7de4db13-8ba8-4b59-a6de-849df69335e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""871cfbe3-5c3f-47f9-a840-6946d38e3755"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerWalk
        m_PlayerWalk = asset.FindActionMap("PlayerWalk", throwIfNotFound: true);
        m_PlayerWalk_Movement = m_PlayerWalk.FindAction("Movement", throwIfNotFound: true);
        m_PlayerWalk_Jump = m_PlayerWalk.FindAction("Jump", throwIfNotFound: true);
        m_PlayerWalk_Crouch = m_PlayerWalk.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerWalk_Look = m_PlayerWalk.FindAction("Look", throwIfNotFound: true);
        m_PlayerWalk_WeaponWheel = m_PlayerWalk.FindAction("WeaponWheel", throwIfNotFound: true);
        // Revolver
        m_Revolver = asset.FindActionMap("Revolver", throwIfNotFound: true);
        m_Revolver_Shoot = m_Revolver.FindAction("Shoot", throwIfNotFound: true);
        m_Revolver_Reload = m_Revolver.FindAction("Reload", throwIfNotFound: true);
        // BoardDriving
        m_BoardDriving = asset.FindActionMap("BoardDriving", throwIfNotFound: true);
        m_BoardDriving_Forward = m_BoardDriving.FindAction("Forward", throwIfNotFound: true);
        m_BoardDriving_Back = m_BoardDriving.FindAction("Back", throwIfNotFound: true);
        m_BoardDriving_Left = m_BoardDriving.FindAction("Left", throwIfNotFound: true);
        m_BoardDriving_Right = m_BoardDriving.FindAction("Right", throwIfNotFound: true);
        // Sword
        m_Sword = asset.FindActionMap("Sword", throwIfNotFound: true);
        m_Sword_Attack = m_Sword.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerWalk
    private readonly InputActionMap m_PlayerWalk;
    private List<IPlayerWalkActions> m_PlayerWalkActionsCallbackInterfaces = new List<IPlayerWalkActions>();
    private readonly InputAction m_PlayerWalk_Movement;
    private readonly InputAction m_PlayerWalk_Jump;
    private readonly InputAction m_PlayerWalk_Crouch;
    private readonly InputAction m_PlayerWalk_Look;
    private readonly InputAction m_PlayerWalk_WeaponWheel;
    public struct PlayerWalkActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerWalkActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerWalk_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerWalk_Jump;
        public InputAction @Crouch => m_Wrapper.m_PlayerWalk_Crouch;
        public InputAction @Look => m_Wrapper.m_PlayerWalk_Look;
        public InputAction @WeaponWheel => m_Wrapper.m_PlayerWalk_WeaponWheel;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWalk; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWalkActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerWalkActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerWalkActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerWalkActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @WeaponWheel.started += instance.OnWeaponWheel;
            @WeaponWheel.performed += instance.OnWeaponWheel;
            @WeaponWheel.canceled += instance.OnWeaponWheel;
        }

        private void UnregisterCallbacks(IPlayerWalkActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @WeaponWheel.started -= instance.OnWeaponWheel;
            @WeaponWheel.performed -= instance.OnWeaponWheel;
            @WeaponWheel.canceled -= instance.OnWeaponWheel;
        }

        public void RemoveCallbacks(IPlayerWalkActions instance)
        {
            if (m_Wrapper.m_PlayerWalkActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerWalkActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerWalkActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerWalkActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerWalkActions @PlayerWalk => new PlayerWalkActions(this);

    // Revolver
    private readonly InputActionMap m_Revolver;
    private List<IRevolverActions> m_RevolverActionsCallbackInterfaces = new List<IRevolverActions>();
    private readonly InputAction m_Revolver_Shoot;
    private readonly InputAction m_Revolver_Reload;
    public struct RevolverActions
    {
        private @PlayerControls m_Wrapper;
        public RevolverActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Revolver_Shoot;
        public InputAction @Reload => m_Wrapper.m_Revolver_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Revolver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RevolverActions set) { return set.Get(); }
        public void AddCallbacks(IRevolverActions instance)
        {
            if (instance == null || m_Wrapper.m_RevolverActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RevolverActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IRevolverActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IRevolverActions instance)
        {
            if (m_Wrapper.m_RevolverActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRevolverActions instance)
        {
            foreach (var item in m_Wrapper.m_RevolverActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RevolverActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RevolverActions @Revolver => new RevolverActions(this);

    // BoardDriving
    private readonly InputActionMap m_BoardDriving;
    private List<IBoardDrivingActions> m_BoardDrivingActionsCallbackInterfaces = new List<IBoardDrivingActions>();
    private readonly InputAction m_BoardDriving_Forward;
    private readonly InputAction m_BoardDriving_Back;
    private readonly InputAction m_BoardDriving_Left;
    private readonly InputAction m_BoardDriving_Right;
    public struct BoardDrivingActions
    {
        private @PlayerControls m_Wrapper;
        public BoardDrivingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_BoardDriving_Forward;
        public InputAction @Back => m_Wrapper.m_BoardDriving_Back;
        public InputAction @Left => m_Wrapper.m_BoardDriving_Left;
        public InputAction @Right => m_Wrapper.m_BoardDriving_Right;
        public InputActionMap Get() { return m_Wrapper.m_BoardDriving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoardDrivingActions set) { return set.Get(); }
        public void AddCallbacks(IBoardDrivingActions instance)
        {
            if (instance == null || m_Wrapper.m_BoardDrivingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoardDrivingActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IBoardDrivingActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IBoardDrivingActions instance)
        {
            if (m_Wrapper.m_BoardDrivingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoardDrivingActions instance)
        {
            foreach (var item in m_Wrapper.m_BoardDrivingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoardDrivingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoardDrivingActions @BoardDriving => new BoardDrivingActions(this);

    // Sword
    private readonly InputActionMap m_Sword;
    private List<ISwordActions> m_SwordActionsCallbackInterfaces = new List<ISwordActions>();
    private readonly InputAction m_Sword_Attack;
    public struct SwordActions
    {
        private @PlayerControls m_Wrapper;
        public SwordActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Sword_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Sword; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwordActions set) { return set.Get(); }
        public void AddCallbacks(ISwordActions instance)
        {
            if (instance == null || m_Wrapper.m_SwordActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwordActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(ISwordActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(ISwordActions instance)
        {
            if (m_Wrapper.m_SwordActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwordActions instance)
        {
            foreach (var item in m_Wrapper.m_SwordActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwordActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwordActions @Sword => new SwordActions(this);
    public interface IPlayerWalkActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnWeaponWheel(InputAction.CallbackContext context);
    }
    public interface IRevolverActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
    public interface IBoardDrivingActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface ISwordActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
}
